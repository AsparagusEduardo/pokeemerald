
const NPC_HOST = 1
const NPC_REWARD = 2

const FAIL_ROUND_COUNTER = 100

const FLAG_HIDE_HOST = FLAG_TEMP_1
const FLAG_HIDE_REWARD = FLAG_TEMP_2

const VAR_CURRENT_ROUND = VAR_TEMP_0
const VAR_GAMESHOW_TRIGGERED = VAR_TEMP_1

const VAR_GOOD_BOX = VAR_TEMP_2

// WTP Vars
const VAR_CURRENT_SPECIES = VAR_TEMP_A

// Voltob flip vars
const VAR_VOLTORB_FLIP_LVL = VAR_0x8004


mapscripts Rogue_Encounter_GameShow_MapScripts 
{
    MAP_SCRIPT_ON_LOAD: Rogue_Encounter_GameShow_OnLoad
}

script Rogue_Encounter_GameShow_OnLoad
{
    special(GameShow_RestartGameShow)

    clearflag(FLAG_HIDE_HOST)
    clearflag(FLAG_HIDE_REWARD)
}

script Rogue_Encounter_GameShow_TriggerIntro
{
    lockall

    setvar(VAR_GAMESHOW_TRIGGERED, 1)
    msgbox(format("WAHEY!"), MSGBOX_DEFAULT)

    applymovement(NPC_HOST, GameShow_Host_Spin)
    waitmovement(0)

    setweather(WEATHER_NONE)
    doweather
    playse(SE_TRUCK_DOOR)
    delay(30)

    playbgm(MUS_GAME_CORNER, TRUE)

    msgbox(format("Welcome to my ever so lovingly setup Game Show!"), MSGBOX_DEFAULT)

    closemessage
    playse(SE_APPLAUSE)
    //waitse

    msgbox(format("Now, contestant!\nAre you aware how this Game Show runs?"), MSGBOX_YESNO)
    if(var(VAR_RESULT) == YES)
    {
        msgbox(format("Wonderful!\nLet's get straight into the action!"), MSGBOX_DEFAULT)
    }
    else
    {
        msgbox(format("In each Game Show, we will have a specific game we will play.\pEach game will consist of several rounds.\pOnce you complete a round, you will earn a reward, you may then choose to finish the Game Show or bet that reward on another round. todo"), MSGBOX_DEFAULT)
    }

    msgbox(format("For our show today, the game will be… … …"), MSGBOX_DEFAULT)

    random(3)
    switch(var(VAR_RESULT))
    {
        // Weight this higher as it's more accessible
        case 0:
        case 1:
            call(Rogue_Encounter_GameShow_WhosThatPokemonFlow)

        case 2:
            call(Rogue_Encounter_GameShow_VoltorbFlip)
    }

    applymovement(NPC_HOST, GameShow_Host_Spin)
    waitmovement(0)

    msgbox(format("That's all for now folks!\nKe ke ke"), MSGBOX_DEFAULT)

    if(var(VAR_CURRENT_ROUND) != FAIL_ROUND_COUNTER)
    {
        // Place reward
        clearflag(FLAG_HIDE_REWARD)
        setobjectxy(NPC_REWARD, 7, 8)
        setobjectxyperm(NPC_REWARD, 7, 8)
    }
    else
    {
        // Hide reward 
        hideobjectat(NPC_REWARD, MAP_ROGUE_ENCOUNTER_GAME_SHOW)
        setflag(FLAG_HIDE_REWARD)
        setobjectxy(NPC_REWARD, 0, 0)
        setobjectxyperm(NPC_REWARD, 0, 0)
    }

    applymovement(NPC_HOST, GameShow_Host_Exit)
    waitmovement(0)

    setobjectxy(NPC_HOST, 0, 0)
    setobjectxyperm(NPC_HOST, 0, 0)
    hideobjectat(NPC_HOST, MAP_ROGUE_ENCOUNTER_GAME_SHOW)
    setflag(FLAG_HIDE_HOST)

    releaseall
}

script Rogue_Interact_GiveReward
{
    lock

    msgbox(format("Oh.\pIt has a note attached:\p'Cheaters never prosper ke ke ke - Randoman'"))

    playmoncry(SPECIES_ELECTRODE, CRY_MODE_ENCOUNTER)
    waitmoncry

    removeobject(VAR_LAST_TALKED)

    seteventmon(SPECIES_ELECTRODE, 1)

    special(BattleSetup_StartLegendaryBattle)
    waitstate

    release
}

script Rogue_Encounter_GameShow_WhosThatPokemonFlow
{
    msgbox(format("Who's that Pokémon?!\pThere will be 6 rounds, you will have to guess the specific Pokémon based on our prompt.\pNow…"), MSGBOX_DEFAULT)

    while(var(VAR_CURRENT_ROUND) <= 6)
    {
        buffernumberstring(STR_VAR_1, VAR_CURRENT_ROUND)
        msgbox(format("Round {STR_VAR_1}!"))

        special(GameShow_SelectRandomSpecies)
        specialvar(VAR_CURRENT_SPECIES, GameShow_BufferSpecies)

        // todo - say which item you're playing for
        // todo - would you like to risk it and continue playing?

        // 3 rounds of sillouettes
        if(var(VAR_CURRENT_ROUND) <= 3)
        {
            message(format("Which Pokémon does this silhouette belong to?"))
            showmonpic(VAR_CURRENT_SPECIES, 10, 3, TRUE)
            delay(20)
            waitmessage
            waitbuttonpress
            hidemonpic
        }
        // 3 rounds of guess the cry
        else
        {
            message(format("Which Pokémon does this cry belong to?"))
            waitmessage
            delay(30)

            playmoncry(VAR_CURRENT_SPECIES, CRY_MODE_NORMAL)
            waitmoncry
            delay(90)

            playmoncry(VAR_CURRENT_SPECIES, CRY_MODE_NORMAL)
            waitmoncry
            delay(90)

            playmoncry(VAR_CURRENT_SPECIES, CRY_MODE_NORMAL)
            waitmoncry
            delay(90)
        }

        setvar(VAR_0x8004, EASY_CHAT_TYPE_ROGUE_GAMESHOW_CHOOSE_MON)
        call(Common_ShowEasyChatScreen)

        if(var(VAR_RESULT) == YES)
        {
            msgbox(format("That answer is…"))
            special(GameShow_CheckResultMatchesSpecies)
        }

        if(var(VAR_RESULT) == YES)
        {
            playse(SE_DING_DONG)
            waitse

            msgbox(format("Correct!"))
            addvar(VAR_CURRENT_ROUND, 1)
        }
        else
        {
            playse(SE_BOO)
            waitse

            bufferspeciesname(STR_VAR_1, VAR_CURRENT_SPECIES)

            msgbox(format("Incorrect!\nThe answer was {STR_VAR_1}."))
            setvar(VAR_CURRENT_ROUND, FAIL_ROUND_COUNTER)
        }
    }
}

script Rogue_Encounter_GameShow_VoltorbFlip
{
    msgbox(format("Voltorb Flip!\pThere will be 3 rounds, you will have to collect all of the 2 and 3 cards on the board without flipping any Voltorbs.\pNow…"), MSGBOX_DEFAULT)

    setvar(VAR_VOLTORB_FLIP_LVL, 0)

    while(var(VAR_CURRENT_ROUND) <= 3)
    {
        buffernumberstring(STR_VAR_1, VAR_CURRENT_ROUND)
        msgbox(format("Round {STR_VAR_1}!"))

        special(Special_ViewVoltorbFlip)
        waitstate

        if(var(VAR_RESULT) == YES)
        {
            playse(SE_DING_DONG)
            waitse

            msgbox(format("Congratulation!"))
            addvar(VAR_CURRENT_ROUND, 1)
            addvar(VAR_VOLTORB_FLIP_LVL, 2)
        }
        else
        {
            playse(SE_BOO)
            waitse

            msgbox(format("Oh no!"))
            setvar(VAR_CURRENT_ROUND, FAIL_ROUND_COUNTER)
        }
    }
}


movement GameShow_Host_Spin
{
    face_right
    delay_1

    face_up
    delay_1

    face_left
    delay_1

    face_down
    delay_1
    
    face_right
    delay_1

    face_up
    delay_1

    face_left
    delay_1

    face_down
    delay_1

    jump_in_place_down
}

movement GameShow_Host_Exit {
    jump_2_up * 2
}