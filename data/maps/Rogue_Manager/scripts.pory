const VAR_ITEM_INDEX = VAR_0x8000
const VAR_ITEM_ID_VAL = VAR_0x8001
const VAR_SHOP_DIFFICULTY = VAR_0x8000
const VAR_SHOP_RANDOM_IDX = VAR_TEMP_F

mapscripts Rogue_Manager_MapScripts
{
}

// Re-used scripts
//

// Can't break battles out into a single util down to how trainerbattle works :(
// So use pre-post calls to setup states
//script Rogue_PreBattle_Internal
//{
//}

script Rogue_PostBattle_Internal
{
    msgbox(format("Good luck with your next battle!"), MSGBOX_AUTOCLOSE)
}

script Rogue_GiveItem_Internal
{
    // Debug
    //buffernumberstring(STR_VAR_1, VAR_ITEM_INDEX)
    //bufferitemname(STR_VAR_2, VAR_ITEM_ID_VAL)
    //msgbox(format("idx {STR_VAR_1}\nitem {STR_VAR_2}"), MSGBOX_DEFAULT)

    if(flag(FLAG_ROGUE_EXPANSION_ACTIVE))
    {
        // ITEM_FIRE_MEMORY -> ITEM_DIANCITE
        if(var(VAR_ITEM_ID_VAL) >= 250 && var(VAR_ITEM_ID_VAL) <= 338)
        {
            finditem(VAR_ITEM_ID_VAL, 1)
        } 
        // ITEM_NORMALIUM_Z -> ITEM_ULTRANECROZIUM_Z
        elif(var(VAR_ITEM_ID_VAL) >= 357 && var(VAR_ITEM_ID_VAL) <= 391)
        {
            finditem(VAR_ITEM_ID_VAL, 1)
        } 
        else
        {
            finditem(VAR_ITEM_ID_VAL, 3)
        }
    }
    else
    {
        finditem(VAR_ITEM_ID_VAL, 3)
    }
}

script Rogue_QuickSaveRun
{
    lockall

    setflag(FLAG_ROGUE_VALID_QUICK_SAVE)
    call(Common_EventScript_SaveGame)

    if(var(VAR_RESULT) == YES)
    {
        fadescreen(FADE_TO_BLACK)
        delay(60)
        special(DoSoftReset)
    }
    else
    {
        clearflag(FLAG_ROGUE_VALID_QUICK_SAVE)
    }

    releaseall
}

script Rogue_QuickSaveLoad
{
    // We can accidentally call this on successful run return
    lockall

    if(flag(FLAG_ROGUE_VALID_QUICK_SAVE))
    {
        clearflag(FLAG_ROGUE_VALID_QUICK_SAVE)
        msgbox(format("Adventure has been reloaded."))
        waitmessage()
        call(Common_EventScript_ForceSaveGame)
    }
    else
    {
        call(Rogue_ReturnToHub)
    }

    releaseall
}

script Rogue_RetireFromRun
{
    lockall
    msgbox(format("Are you sure you'd like to return to the HUB?"), MSGBOX_YESNO)

    if(var(VAR_RESULT) == YES)
    {
        call(Rogue_ReturnToHub)
    }

    releaseall
}

script Rogue_ReturnToHub
{
    warp(MAP_ROGUE_HUB, 29, 7)
    return
}

// Movement
//
script Rogue_Common_TurnPlayerNorth
{
    turnobject(OBJ_EVENT_ID_PLAYER, DIR_NORTH)
    end
}
script Rogue_Common_TurnPlayerSouth
{
    turnobject(OBJ_EVENT_ID_PLAYER, DIR_SOUTH)
    end
}
script Rogue_Common_TurnPlayerEast
{
    turnobject(OBJ_EVENT_ID_PLAYER, DIR_EAST)
    end
}
script Rogue_Common_TurnPlayerWest
{
    turnobject(OBJ_EVENT_ID_PLAYER, DIR_WEST)
    end
}

// Shops
//

script Rogue_Shop_GetRandomIndex
{
    if(var(VAR_SHOP_RANDOM_IDX) == 0)
    {
        random(5)
        addvar(VAR_RESULT, 1)
        copyvar(VAR_SHOP_RANDOM_IDX, VAR_RESULT)
    }
    else
    {
        copyvar(VAR_RESULT, VAR_SHOP_RANDOM_IDX)
    }
}

script Rogue_Shop_Balls
{    
    lock
    faceplayer
    message("Welcome to the POKéBALL Shop!")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_BALLS)

    msgbox("Come again soon!")
    release
}

script Rogue_Shop_Medicine
{    
    lock
    faceplayer
    message("Welcome to the MEDICINE Shop!")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_MEDICINE)

    msgbox("Come again soon!")
    release
}

script Rogue_Shop_TMs
{
    lock
    faceplayer
    message("Welcome to the TM Shop!")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_TMS)

    msgbox("Come again soon!")
    release
}

script Rogue_Shop_BattleEnhancers
{
    lock
    faceplayer
    message("Welcome to the TRAVELLING BATTLE Shop!\nI stock ENHANCEMENT ITEMS.")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_BATTLE_ENHANCERS)

    msgbox("Come again soon!")
    release
}

script Rogue_Shop_HeldItems
{
    lock
    faceplayer
    message("Welcome to the TRAVELLING BATTLE Shop!\nI stock HELD ITEMS.")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_HELD_ITEMS)

    msgbox("Come again soon!")
    release
}

script Rogue_Shop_RareHeldItems
{
    lock
    faceplayer
    message("Welcome to the TRAVELLING BATTLE Shop!\nI stock RARE HELD ITEMS.")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_RARE_HELD_ITEMS)

    msgbox("Come again soon!")
    release
}

script RogueSafari_Sign_South
{
    if(flag(FLAG_ROGUE_EXPANSION_ACTIVE))
    {
        msgbox(format("SOUTH AREA home to:\nNORMAL, FIGHTING, FAIRY POKéMON"), MSGBOX_SIGN)
    }
    else
    {
        msgbox(format("SOUTH AREA home to:\nNORMAL, FIGHTING POKéMON"), MSGBOX_SIGN)
    }
}

script RogueSafari_Sign_SouthWest
{
    msgbox(format("SOUTH WEST AREA home to:\nGRASS, POISON, DARK POKéMON"), MSGBOX_SIGN)
}

script RogueSafari_Sign_NorthWest
{
    msgbox(format("NORTH WEST AREA home to:\nDRAGON, STEEL, PSYCHIC POKéMON"), MSGBOX_SIGN)
}

script RogueSafari_Sign_North
{
    msgbox(format("NORTH AREA home to:\nFLYING, GHOST, FIRE POKéMON"), MSGBOX_SIGN)
}

script RogueSafari_Sign_NorthEast
{
    msgbox(format("NORTH EAST AREA home to:\nROCK, GROUND, ELECTRIC POKéMON"), MSGBOX_SIGN)
}

script RogueSafari_Sign_SouthEast
{
    msgbox(format("SOUTH EAST AREA home to:\nWATER, BUG, ICE POKéMON"), MSGBOX_SIGN)
}


// Tutors
//
script Rogue_Tutor_MoveRelearn
{
    special(TeachMoveSetContextRelearnMove)

    lock
    faceplayer
    msgbox(format("I'm the LVL MOVE TUTOR.\p I can teach POKéMON moves if you'd like?\pFor a cost of course."), MSGBOX_DEFAULT)

    showmoneybox(0, 0)
    msgbox(format("Would you like me to teach your POKéMON a move for ¥1000?"), MSGBOX_YESNO)
    hidemoneybox

    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    checkmoney(1000)
    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_NotEnoughMoney)
    }

    special(ChooseMonForMoveRelearner)
    waitstate

    if(var(VAR_0x8004) == PARTY_NOTHING_CHOSEN)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    special(IsSelectedMonEgg)

    if(var(VAR_RESULT) == TRUE)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    // Teach move
    special(TeachMoveFromContext)
    waitstate

    if(var(VAR_0x8004) == 0)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    removemoney(1000)
    release
}

script Rogue_Tutor_EggMoveLearn
{
    special(TeachMoveSetContextEggMove)

    lock
    faceplayer
    msgbox(format("I'm the EGG MOVE TUTOR.\p I can teach POKéMON moves if you'd like?"), MSGBOX_DEFAULT)

    showmoneybox(0, 0)
    msgbox(format("Would you like me to teach your POKéMON a move for ¥2000?"), MSGBOX_YESNO)
    hidemoneybox

    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    checkmoney(2000)
    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_NotEnoughMoneyKind)
    }

    special(ChooseMonForMoveRelearner)
    waitstate

    if(var(VAR_0x8004) == PARTY_NOTHING_CHOSEN)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    special(IsSelectedMonEgg)

    if(var(VAR_RESULT) == TRUE)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    // Teach move
    special(TeachMoveFromContext)
    waitstate

    if(var(VAR_0x8004) == 0)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    removemoney(2000)
    release
}

script Rogue_Tutor_TutorMoveLearn
{
    special(TeachMoveSetContextTutorMove)

    lock
    faceplayer
    msgbox(format("HYAH!\p I'm the SPECIAL MOVE TUTOR!\p I can teach POKéMON moves some radical moves!"), MSGBOX_DEFAULT)

    showmoneybox(0, 0)
    msgbox(format("Want me to teach your POKéMON a move for ¥3000?"), MSGBOX_YESNO)
    hidemoneybox

    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    checkmoney(3000)
    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_NotEnoughMoney)
    }

    special(ChooseMonForMoveRelearner)
    waitstate

    if(var(VAR_0x8004) == PARTY_NOTHING_CHOSEN)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    special(IsSelectedMonEgg)

    if(var(VAR_RESULT) == TRUE)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    // Teach move
    special(TeachMoveFromContext)
    waitstate

    if(var(VAR_0x8004) == 0)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    removemoney(3000)
    release
}

script Rogue_Tutor_NotEnoughMoneyKind
{
    msgbox(format("I'm afraid you don't have enough money.\pCome back once you've gotten a bit more and I'll gladly teach some moves to your POKéMON."), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_NotEnoughMoney
{
    msgbox(format("You don't have enough money!\pCome back once you've got enough."), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_MoveRelearnCancel
{
    msgbox(format("You know where to find me, if you change your mind."), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_MoveDelete
{
    lock
    faceplayer
    msgbox(format("Uh..\nOh, yes, I'm the MOVE DELETER.\pI can make POKéMON forget their moves, if you'd like?"), MSGBOX_YESNO)

    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_MoveDeleteCancel)
    }

    special(ChoosePartyMon)
    waitstate
    if(var(VAR_0x8004) == PARTY_NOTHING_CHOSEN)
    {
        goto(Rogue_Tutor_MoveDeleteCancel)
    }

    special(IsSelectedMonEgg)
    if(var(VAR_RESULT) == TRUE)
    {
        goto(Rogue_Tutor_MoveDeleteEgg)
    }

    special(GetNumMovesSelectedMonHas)
    if(var(VAR_RESULT) <= 1)
    {
        goto(Rogue_Tutor_MoveDeleteNoMoves)
    }

    fadescreen(FADE_TO_BLACK)
    special(MoveDeleterChooseMoveToForget)
    fadescreen(FADE_FROM_BLACK)

    if(var(VAR_0x8005) == MAX_MON_MOVES)
    {
        goto(Rogue_Tutor_MoveDeleteCancel)
    }

    special(MoveDeleterForgetMove)
    playfanfare(MUS_MOVE_DELETED)
    waitfanfare

    release
}

script Rogue_Tutor_MoveDeleteNoMoves
{
    msgbox(format("This POKéMON needs move moves before I can make it forget any."), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_MoveDeleteEgg
{
    msgbox(format("As much as wish I could..\nI can't unteach an EGG."), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_MoveDeleteCancel
{
    msgbox(format("Oh.. OK then."), MSGBOX_DEFAULT)
    release
}


// Trainer Blocks
//
script Rogue_Battle_PreBoss
{
    lock
    faceplayer
    msgbox(format("Would you like to battle with me to level up?"), MSGBOX_YESNO)

    if(var(VAR_RESULT) == YES)
    {
        trainerbattle(TRAINER_BATTLE_SINGLE_NO_INTRO_TEXT, TRAINER_ROGUE_POKEFAN_F, 0, format("Good luck with the big battle!"))
    }
    else
    {
        msgbox(format("Let me know if you change your mind."), MSGBOX_DEFAULT)
    }

    release
}

script Rogue_Battle_BreederF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_BREEDER_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_BreederM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_BREEDER_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_RichF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_RICH_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_RichM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_RICH_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_CooltrainerF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_COOLTRAINER_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_CooltrainerM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_COOLTRAINER_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_PokefanF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_POKEFAN_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_PokefanM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_POKEFAN_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_SchoolkidF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_SCHOOL_KID_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_SchoolkidM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_SCHOOL_KID_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_TuberF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_TUBER_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_TuberM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_TUBER_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_PoshF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_POSH_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_PoshM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_POSH_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_MagmaF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_MAGMA_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_MagmaM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_MAGMA_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_AquaF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_AQUA_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_AquaM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_AQUA_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}


// Item Blocks
//
script Rogue_Give_Item0
{
    setvar(VAR_ITEM_INDEX, 0)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM0)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item1
{
    setvar(VAR_ITEM_INDEX, 1)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM1)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item2
{
    setvar(VAR_ITEM_INDEX, 2)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM2)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item3
{
    setvar(VAR_ITEM_INDEX, 3)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM3)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item4
{
    setvar(VAR_ITEM_INDEX, 4)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM4)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item5
{
    setvar(VAR_ITEM_INDEX, 5)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM5)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item6
{
    setvar(VAR_ITEM_INDEX, 6)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM6)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item7
{
    setvar(VAR_ITEM_INDEX, 7)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM7)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item8
{
    setvar(VAR_ITEM_INDEX, 8)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM8)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item9
{
    setvar(VAR_ITEM_INDEX, 9)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM9)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item10
{
    setvar(VAR_ITEM_INDEX, 10)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM10)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item11
{
    setvar(VAR_ITEM_INDEX, 11)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM11)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item12
{
    setvar(VAR_ITEM_INDEX, 12)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM12)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item13
{
    setvar(VAR_ITEM_INDEX, 13)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM13)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item14
{
    setvar(VAR_ITEM_INDEX, 14)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM14)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item15
{
    setvar(VAR_ITEM_INDEX, 15)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM15)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item16
{
    setvar(VAR_ITEM_INDEX, 16)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM16)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item17
{
    setvar(VAR_ITEM_INDEX, 17)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM17)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item18
{
    setvar(VAR_ITEM_INDEX, 18)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM18)
    call(Rogue_GiveItem_Internal)
}
