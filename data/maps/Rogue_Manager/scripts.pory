const VAR_ITEM_INDEX = VAR_0x8000
const VAR_ITEM_ID_VAL = VAR_0x8001
const VAR_SHOP_DIFFICULTY = VAR_0x8000
const VAR_SHOP_RANDOM_IDX = VAR_TEMP_F

mapscripts Rogue_Manager_MapScripts
{
}

// Re-used scripts
//

// Can't break battles out into a single util down to how trainerbattle works :(
// So use pre-post calls to setup states
//script Rogue_PreBattle_Internal
//{
//}

script Rogue_PostBattle_Internal
{
    msgbox(format("Good luck with your next battle!"), MSGBOX_AUTOCLOSE)
}

script Rogue_GiveItem_Internal
{
    // Debug
    //buffernumberstring(STR_VAR_1, VAR_ITEM_INDEX)
    //bufferitemname(STR_VAR_2, VAR_ITEM_ID_VAL)
    //msgbox(format("idx {STR_VAR_1}\nitem {STR_VAR_2}"), MSGBOX_DEFAULT)

    finditem(VAR_ITEM_ID_VAL, 3)
}

script Rogue_QuickSaveRun
{
    lockall

    setflag(FLAG_ROGUE_VALID_QUICK_SAVE)
    call(Common_EventScript_SaveGame)

    if(var(VAR_RESULT) == YES)
    {
        fadescreen(FADE_TO_BLACK)
        delay(60)
        special(DoSoftReset)
    }
    else
    {
        clearflag(FLAG_ROGUE_VALID_QUICK_SAVE)
    }

    releaseall
}

script Rogue_QuickSaveLoad
{
    lockall

    if(flag(FLAG_ROGUE_VALID_QUICK_SAVE))
    {
        clearflag(FLAG_ROGUE_VALID_QUICK_SAVE)
        msgbox(format("Adventure has been reloaded."))
        waitmessage()
        call(Common_EventScript_ForceSaveGame)
    }
    else
    {
        call(Rogue_ReturnToHub)
    }

    releaseall
}

script Rogue_RetireFromRun
{
    lockall
    msgbox(format("Are you sure you'd like to return to the HUB?"), MSGBOX_YESNO)

    if(var(VAR_RESULT) == YES)
    {
        call(Rogue_ReturnToHub)
    }

    releaseall
}

script Rogue_ReturnToHub
{
    warp(MAP_ROGUE_HUB, 29, 7)
    return
}

// Movement
//
script Rogue_Common_TurnPlayerNorth
{
    turnobject(OBJ_EVENT_ID_PLAYER, DIR_NORTH)
    end
}
script Rogue_Common_TurnPlayerSourt
{
    turnobject(OBJ_EVENT_ID_PLAYER, DIR_SOUTH)
    end
}
script Rogue_Common_TurnPlayerEast
{
    turnobject(OBJ_EVENT_ID_PLAYER, DIR_EAST)
    end
}
script Rogue_Common_TurnPlayerWest
{
    turnobject(OBJ_EVENT_ID_PLAYER, DIR_WEST)
    end
}

// Shops
//

script Rogue_Shop_GetRandomIndex
{
    if(var(VAR_SHOP_RANDOM_IDX) == 0)
    {
        random(5)
        addvar(VAR_RESULT, 1)
        copyvar(VAR_SHOP_RANDOM_IDX, VAR_RESULT)
    }
    else
    {
        copyvar(VAR_RESULT, VAR_SHOP_RANDOM_IDX)
    }
}

script Rogue_Shop_Utilty
{    
    lock
    faceplayer
    message("Welcome to the UTILITY Shop!")
    waitmessage

    if(flag(FLAG_ROGUE_RUN_ACTIVE))
    {
        copyvar(VAR_SHOP_DIFFICULTY, VAR_ROGUE_DIFFICULTY)
    }
    else
    {
        copyvar(VAR_SHOP_DIFFICULTY, VAR_ROGUE_FURTHEST_DIFFICULTY)
    }

    switch(var(VAR_SHOP_DIFFICULTY))
    {
        case 0:
            pokemart(Rogue_Shop_Utility0)
        case 1:
            pokemart(Rogue_Shop_Utility1)
        case 2:
            pokemart(Rogue_Shop_Utility2)
        case 3:
            pokemart(Rogue_Shop_Utility3)
        case 4:
            pokemart(Rogue_Shop_Utility4)
        case 5:
            pokemart(Rogue_Shop_Utility5)

        case 8:
            pokemart(Rogue_Shop_Utility8)

        default:
            pokemart(Rogue_Shop_Utility6)
    }

    msgbox("Come again soon!")
    release
}

mart Rogue_Shop_Utility0 {
    ITEM_POTION
    ITEM_POKE_BALL
    ITEM_ANTIDOTE
}

mart Rogue_Shop_Utility1 {
    ITEM_POTION
    ITEM_SUPER_POTION
    ITEM_POKE_BALL
    ITEM_GREAT_BALL
    ITEM_REPEL
    ITEM_PARALYZE_HEAL
    ITEM_BURN_HEAL
    ITEM_ANTIDOTE
    ITEM_AWAKENING
    ITEM_ICE_HEAL
}

mart Rogue_Shop_Utility2 {
    ITEM_POTION
    ITEM_SUPER_POTION
    ITEM_HYPER_POTION
    ITEM_ETHER
    ITEM_POKE_BALL
    ITEM_GREAT_BALL
    ITEM_ULTRA_BALL
    ITEM_REPEL
    ITEM_SUPER_REPEL
    ITEM_PARALYZE_HEAL
    ITEM_BURN_HEAL
    ITEM_ANTIDOTE
    ITEM_AWAKENING
    ITEM_ICE_HEAL
}

mart Rogue_Shop_Utility3 {
    ITEM_POTION
    ITEM_SUPER_POTION
    ITEM_HYPER_POTION
    ITEM_MAX_POTION
    ITEM_ETHER
    ITEM_MAX_ETHER
    ITEM_POKE_BALL
    ITEM_GREAT_BALL
    ITEM_ULTRA_BALL
    ITEM_REPEL
    ITEM_SUPER_REPEL
    ITEM_MAX_REPEL
    ITEM_FULL_HEAL
    ITEM_PARALYZE_HEAL
    ITEM_BURN_HEAL
    ITEM_ANTIDOTE
    ITEM_AWAKENING
    ITEM_ICE_HEAL
}

mart Rogue_Shop_Utility4 {
    ITEM_POTION
    ITEM_SUPER_POTION
    ITEM_HYPER_POTION
    ITEM_MAX_POTION
    ITEM_FULL_RESTORE
    ITEM_ETHER
    ITEM_MAX_ETHER
    ITEM_ELIXIR
    ITEM_POKE_BALL
    ITEM_GREAT_BALL
    ITEM_ULTRA_BALL
    ITEM_REPEL
    ITEM_SUPER_REPEL
    ITEM_MAX_REPEL
    ITEM_FULL_HEAL
    ITEM_PARALYZE_HEAL
    ITEM_BURN_HEAL
    ITEM_ANTIDOTE
    ITEM_AWAKENING
    ITEM_ICE_HEAL
}

mart Rogue_Shop_Utility5 {
    ITEM_POTION
    ITEM_SUPER_POTION
    ITEM_HYPER_POTION
    ITEM_MAX_POTION
    ITEM_FULL_RESTORE
    ITEM_ETHER
    ITEM_MAX_ETHER
    ITEM_ELIXIR
    ITEM_MAX_ELIXIR
    ITEM_POKE_BALL
    ITEM_GREAT_BALL
    ITEM_ULTRA_BALL
    ITEM_NET_BALL
    ITEM_DIVE_BALL
    ITEM_NEST_BALL
    ITEM_REPEAT_BALL
    ITEM_TIMER_BALL
    ITEM_LUXURY_BALL
    ITEM_REPEL
    ITEM_SUPER_REPEL
    ITEM_MAX_REPEL
    ITEM_FULL_HEAL
    ITEM_PARALYZE_HEAL
    ITEM_BURN_HEAL
    ITEM_ANTIDOTE
    ITEM_AWAKENING
    ITEM_ICE_HEAL
}

mart Rogue_Shop_Utility6 {
    ITEM_POTION
    ITEM_SUPER_POTION
    ITEM_HYPER_POTION
    ITEM_MAX_POTION
    ITEM_FULL_RESTORE
    ITEM_ETHER
    ITEM_MAX_ETHER
    ITEM_ELIXIR
    ITEM_MAX_ELIXIR
    ITEM_POKE_BALL
    ITEM_GREAT_BALL
    ITEM_ULTRA_BALL
    ITEM_NET_BALL
    ITEM_DIVE_BALL
    ITEM_NEST_BALL
    ITEM_REPEAT_BALL
    ITEM_TIMER_BALL
    ITEM_LUXURY_BALL
    ITEM_REPEL
    ITEM_SUPER_REPEL
    ITEM_MAX_REPEL
    ITEM_FULL_HEAL
    ITEM_PARALYZE_HEAL
    ITEM_BURN_HEAL
    ITEM_ANTIDOTE
    ITEM_AWAKENING
    ITEM_ICE_HEAL
}

// Skip Shop 7

mart Rogue_Shop_Utility8 {
    ITEM_POTION
    ITEM_SUPER_POTION
    ITEM_HYPER_POTION
    ITEM_MAX_POTION
    ITEM_FULL_RESTORE
    ITEM_ETHER
    ITEM_MAX_ETHER
    ITEM_ELIXIR
    ITEM_MAX_ELIXIR
    ITEM_POKE_BALL
    ITEM_GREAT_BALL
    ITEM_ULTRA_BALL
    ITEM_MASTER_BALL
    ITEM_NET_BALL
    ITEM_DIVE_BALL
    ITEM_NEST_BALL
    ITEM_REPEAT_BALL
    ITEM_TIMER_BALL
    ITEM_LUXURY_BALL
    ITEM_REPEL
    ITEM_SUPER_REPEL
    ITEM_MAX_REPEL
    ITEM_FULL_HEAL
    ITEM_PARALYZE_HEAL
    ITEM_BURN_HEAL
    ITEM_ANTIDOTE
    ITEM_AWAKENING
    ITEM_ICE_HEAL
}

script Rogue_Shop_TMs
{
    lock
    faceplayer
    message("Welcome to the TM Shop!")
    waitmessage

    if(flag(FLAG_ROGUE_RUN_ACTIVE))
    {
        copyvar(VAR_SHOP_DIFFICULTY, VAR_ROGUE_DIFFICULTY)
    }
    else
    {
        copyvar(VAR_SHOP_DIFFICULTY, VAR_ROGUE_FURTHEST_DIFFICULTY)
    }

    switch(var(VAR_SHOP_DIFFICULTY))
    {
        case 0:
        case 1:
            pokemart(Rogue_Shop_TM0)
        case 2:
        case 3:
            pokemart(Rogue_Shop_TM2)
        default:
            pokemart(Rogue_Shop_TM4)
    }

    msgbox("Come again soon!")
    release
}

mart Rogue_Shop_TM0 {
    ITEM_TM12
    ITEM_TM34
    ITEM_TM09
    ITEM_TM05
    ITEM_TM17
    ITEM_TM20
}

mart Rogue_Shop_TM2 {
    ITEM_TM12
    ITEM_TM41
    ITEM_TM46
    ITEM_TM24
    ITEM_TM34
    ITEM_TM08
    ITEM_TM31
    ITEM_TM35
    ITEM_TM40
    ITEM_TM30
    ITEM_TM09
    ITEM_TM22
    ITEM_TM28
    ITEM_TM07
    ITEM_TM05
    ITEM_TM10
    ITEM_TM17
    ITEM_TM20
    ITEM_TM21
    ITEM_TM27
    ITEM_TM43
    ITEM_TM45
    ITEM_TM36
    ITEM_TM16
    ITEM_TM33
    ITEM_TM44
    ITEM_TM48
    ITEM_TM39
    ITEM_TM23
    ITEM_TM03
}

mart Rogue_Shop_TM4 {
    ITEM_TM12
    ITEM_TM41
    ITEM_TM46
    ITEM_TM49
    ITEM_TM02
    ITEM_TM24
    ITEM_TM25
    ITEM_TM34
    ITEM_TM01
    ITEM_TM08
    ITEM_TM31
    ITEM_TM11
    ITEM_TM35
    ITEM_TM38
    ITEM_TM50
    ITEM_TM40
    ITEM_TM30
    ITEM_TM09
    ITEM_TM19
    ITEM_TM22
    ITEM_TM26
    ITEM_TM28
    ITEM_TM07
    ITEM_TM13
    ITEM_TM14
    ITEM_TM05
    ITEM_TM10
    ITEM_TM15
    ITEM_TM17
    ITEM_TM20
    ITEM_TM21
    ITEM_TM27
    ITEM_TM32
    ITEM_TM42
    ITEM_TM43
    ITEM_TM45
    ITEM_TM06
    ITEM_TM36
    ITEM_TM04
    ITEM_TM16
    ITEM_TM29
    ITEM_TM33
    ITEM_TM44
    ITEM_TM48
    ITEM_TM37
    ITEM_TM39
    ITEM_TM23
    ITEM_TM47
    ITEM_TM03
    ITEM_TM18
}


script Rogue_Shop_BattleItems
{
    lock
    faceplayer
    message("Welcome to the TRAVELLING BATTLE Shop!")
    waitmessage

    if(flag(FLAG_ROGUE_RUN_ACTIVE))
    {        
        if(var(VAR_SHOP_RANDOM_IDX) == 0)
        {
            random(4)
            copyvar(VAR_SHOP_RANDOM_IDX, VAR_RESULT)
            addvar(VAR_SHOP_RANDOM_IDX, 1)
        }

        switch(var(VAR_SHOP_RANDOM_IDX))
        {
            case 1:
                pokemartwithminprice(Rogue_Shop_Battle0, 500)
            case 2:
                pokemartwithminprice(Rogue_Shop_Battle1, 500)
            case 3:
                pokemartwithminprice(Rogue_Shop_Battle2, 500)
            default:
                pokemartwithminprice(Rogue_Shop_Battle3, 500)
        }
    }
    else
    {
        if(var(VAR_ROGUE_FURTHEST_DIFFICULTY) >= 6)
        {
            pokemartwithminprice(Rogue_Shop_BattleFull, 500)
        }
        else
        {
            pokemartwithminprice(Rogue_Shop_BattleEvos, 500)
        }
    }

    msgbox("Come again soon!")
    release
}

mart Rogue_Shop_BattleEvos {
    ITEM_FIRE_STONE
    ITEM_WATER_STONE
    ITEM_THUNDER_STONE
    ITEM_LEAF_STONE
    ITEM_MOON_STONE
    ITEM_SUN_STONE
    ITEM_EXP_SHARE
    ITEM_DRAGON_SCALE
    ITEM_KINGS_ROCK
    ITEM_METAL_COAT
    ITEM_UP_GRADE
    ITEM_DEEP_SEA_SCALE
    ITEM_DEEP_SEA_TOOTH
}

mart Rogue_Shop_BattleFull {
    ITEM_FIRE_STONE
    ITEM_WATER_STONE
    ITEM_THUNDER_STONE
    ITEM_LEAF_STONE
    ITEM_MOON_STONE
    ITEM_SUN_STONE
    ITEM_EXP_SHARE
    ITEM_DRAGON_SCALE
    ITEM_KINGS_ROCK
    ITEM_METAL_COAT
    ITEM_UP_GRADE
    ITEM_DEEP_SEA_SCALE
    ITEM_DEEP_SEA_TOOTH

    ITEM_AMULET_COIN
    ITEM_BLACK_BELT
    ITEM_BLACK_GLASSES
    ITEM_BRIGHT_POWDER
    ITEM_CHARCOAL
    ITEM_CHOICE_BAND
    ITEM_CLEANSE_TAG
    ITEM_EVERSTONE
    ITEM_FOCUS_BAND
    ITEM_HARD_STONE
    ITEM_LEFTOVERS
    ITEM_LIGHT_BALL
    ITEM_LUCKY_EGG
    ITEM_LUCKY_PUNCH
    ITEM_MAGNET
    ITEM_MENTAL_HERB
    ITEM_METAL_POWDER
    ITEM_MIRACLE_SEED
    ITEM_MYSTIC_WATER
    ITEM_NEVER_MELT_ICE
    ITEM_POISON_BARB
    ITEM_QUICK_CLAW
    ITEM_SCOPE_LENS
    ITEM_SHARP_BEAK
    ITEM_SHELL_BELL
    ITEM_SILK_SCARF
    ITEM_SILVER_POWDER
    ITEM_SMOKE_BALL
    ITEM_SOFT_SAND
    ITEM_SPELL_TAG
    ITEM_STICK
    ITEM_THICK_CLUB
    ITEM_TWISTED_SPOON
    ITEM_WHITE_HERB
    ITEM_DRAGON_FANG
}

mart Rogue_Shop_Battle0 {
    ITEM_FIRE_STONE
    ITEM_WATER_STONE
    ITEM_SUN_STONE
    
    ITEM_AMULET_COIN
    ITEM_BLACK_BELT
    ITEM_BLACK_GLASSES
    ITEM_CLEANSE_TAG
    ITEM_EVERSTONE
    ITEM_FOCUS_BAND
    ITEM_SCOPE_LENS
    ITEM_WHITE_HERB
    ITEM_DRAGON_FANG
}

mart Rogue_Shop_Battle1 {
    ITEM_LEAF_STONE
    ITEM_METAL_COAT
    ITEM_THUNDER_STONE

    ITEM_BRIGHT_POWDER
    ITEM_CHARCOAL
    ITEM_MIRACLE_SEED
    ITEM_MYSTIC_WATER
    ITEM_NEVER_MELT_ICE
    ITEM_LUCKY_PUNCH
    ITEM_MAGNET
    ITEM_MENTAL_HERB
}

mart Rogue_Shop_Battle2 {
    ITEM_UP_GRADE
    ITEM_DRAGON_SCALE
    ITEM_KINGS_ROCK

    ITEM_CHOICE_BAND
    ITEM_HARD_STONE
    ITEM_SMOKE_BALL
    ITEM_SOFT_SAND
    ITEM_SPELL_TAG
    ITEM_METAL_POWDER
    ITEM_SHARP_BEAK
    ITEM_SHELL_BELL
}

mart Rogue_Shop_Battle3 {
    ITEM_EXP_SHARE
    ITEM_MOON_STONE
    ITEM_DEEP_SEA_SCALE
    ITEM_DEEP_SEA_TOOTH

    ITEM_SILK_SCARF
    ITEM_SILVER_POWDER
    ITEM_STICK
    ITEM_THICK_CLUB
    ITEM_TWISTED_SPOON
    ITEM_POISON_BARB
    ITEM_QUICK_CLAW
    ITEM_LEFTOVERS
    ITEM_LIGHT_BALL
    ITEM_LUCKY_EGG
}


// Tutors
//
script Rogue_Tutor_MoveRelearn
{
    special(TeachMoveSetContextRelearnMove)

    lock
    faceplayer
    msgbox(format("I'm the LVL MOVE TUTOR.\p I can teach POKéMON moves if you'd like?\pFor a cost of course."), MSGBOX_DEFAULT)

    showmoneybox(0, 0)
    msgbox(format("Would you like me to teach your POKéMON a move for ¥1000?"), MSGBOX_YESNO)
    hidemoneybox

    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    checkmoney(1000)
    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_NotEnoughMoney)
    }

    special(ChooseMonForMoveRelearner)
    waitstate

    if(var(VAR_0x8004) == PARTY_NOTHING_CHOSEN)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    special(IsSelectedMonEgg)

    if(var(VAR_RESULT) == TRUE)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    // Teach move
    special(TeachMoveFromContext)
    waitstate

    if(var(VAR_0x8004) == 0)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    removemoney(1000)
    release
}

script Rogue_Tutor_EggMoveLearn
{
    special(TeachMoveSetContextEggMove)

    lock
    faceplayer
    msgbox(format("I'm the EGG MOVE TUTOR.\p I can teach POKéMON moves if you'd like?"), MSGBOX_DEFAULT)

    showmoneybox(0, 0)
    msgbox(format("Would you like me to teach your POKéMON a move for ¥2000?"), MSGBOX_YESNO)
    hidemoneybox

    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    checkmoney(2000)
    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_NotEnoughMoneyKind)
    }

    special(ChooseMonForMoveRelearner)
    waitstate

    if(var(VAR_0x8004) == PARTY_NOTHING_CHOSEN)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    special(IsSelectedMonEgg)

    if(var(VAR_RESULT) == TRUE)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    // Teach move
    special(TeachMoveFromContext)
    waitstate

    if(var(VAR_0x8004) == 0)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    removemoney(2000)
    release
}

script Rogue_Tutor_TutorMoveLearn
{
    special(TeachMoveSetContextTutorMove)

    lock
    faceplayer
    msgbox(format("HYAH!\p I'm the SPECIAL MOVE TUTOR!\p I can teach POKéMON moves some radical moves!"), MSGBOX_DEFAULT)

    showmoneybox(0, 0)
    msgbox(format("Want me to teach your POKéMON a move for ¥3000?"), MSGBOX_YESNO)
    hidemoneybox

    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    checkmoney(3000)
    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_NotEnoughMoney)
    }

    special(ChooseMonForMoveRelearner)
    waitstate

    if(var(VAR_0x8004) == PARTY_NOTHING_CHOSEN)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    special(IsSelectedMonEgg)

    if(var(VAR_RESULT) == TRUE)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    // Teach move
    special(TeachMoveFromContext)
    waitstate

    if(var(VAR_0x8004) == 0)
    {
        goto(Rogue_Tutor_MoveRelearnCancel)
    }

    removemoney(3000)
    release
}

script Rogue_Tutor_NotEnoughMoneyKind
{
    msgbox(format("I'm afraid you don't have enough money.\pCome back once you've gotten a bit more and I'll gladly teach some moves to your POKéMON."), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_NotEnoughMoney
{
    msgbox(format("You don't have enough money!\pCome back once you've got enough."), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_MoveRelearnCancel
{
    msgbox(format("You know where to find me, if you change your mind."), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_MoveDelete
{
    lock
    faceplayer
    msgbox(format("Uh..\nOh, yes, I'm the MOVE DELETER.\pI can make POKéMON forget their moves, if you'd like?"), MSGBOX_YESNO)

    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_MoveDeleteCancel)
    }

    special(ChoosePartyMon)
    waitstate
    if(var(VAR_0x8004) == PARTY_NOTHING_CHOSEN)
    {
        goto(Rogue_Tutor_MoveDeleteCancel)
    }

    special(IsSelectedMonEgg)
    if(var(VAR_RESULT) == TRUE)
    {
        goto(Rogue_Tutor_MoveDeleteEgg)
    }

    special(GetNumMovesSelectedMonHas)
    if(var(VAR_RESULT) <= 1)
    {
        goto(Rogue_Tutor_MoveDeleteNoMoves)
    }

    fadescreen(FADE_TO_BLACK)
    special(MoveDeleterChooseMoveToForget)
    fadescreen(FADE_FROM_BLACK)

    if(var(VAR_0x8005) == MAX_MON_MOVES)
    {
        goto(Rogue_Tutor_MoveDeleteCancel)
    }

    special(MoveDeleterForgetMove)
    playfanfare(MUS_MOVE_DELETED)
    waitfanfare

    release
}

script Rogue_Tutor_MoveDeleteNoMoves
{
    msgbox(format("This POKéMON needs move moves before I can make it forget any."), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_MoveDeleteEgg
{
    msgbox(format("As much as wish I could..\nI can't unteach an EGG."), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_MoveDeleteCancel
{
    msgbox(format("Oh.. OK then."), MSGBOX_DEFAULT)
    release
}


// Trainer Blocks
//
script Rogue_Battle_BreederF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_BREEDER_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_BreederM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_BREEDER_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_RichF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_RICH_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_RichM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_RICH_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_CooltrainerF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_COOLTRAINER_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_CooltrainerM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_COOLTRAINER_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_PokefanF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_POKEFAN_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_PokefanM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_POKEFAN_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_SchoolkidF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_SCHOOL_KID_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_SchoolkidM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_SCHOOL_KID_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_TuberF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_TUBER_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_TuberM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_TUBER_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_PoshF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_POSH_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_PoshM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_POSH_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_MagmaF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_MAGMA_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_MagmaM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_MAGMA_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}

script Rogue_Battle_AquaF
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_AQUA_F, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}
script Rogue_Battle_AquaM
{
    //call(Rogue_PreBattle_Internal)
    trainerbattle_single(TRAINER_ROGUE_AQUA_M, format("Let's battle!"), format("Well fought!"))
    call(Rogue_PostBattle_Internal)
}


// Item Blocks
//
script Rogue_Give_Item0
{
    setvar(VAR_ITEM_INDEX, 0)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM0)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item1
{
    setvar(VAR_ITEM_INDEX, 1)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM1)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item2
{
    setvar(VAR_ITEM_INDEX, 2)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM2)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item3
{
    setvar(VAR_ITEM_INDEX, 3)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM3)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item4
{
    setvar(VAR_ITEM_INDEX, 4)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM4)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item5
{
    setvar(VAR_ITEM_INDEX, 5)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM5)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item6
{
    setvar(VAR_ITEM_INDEX, 6)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM6)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item7
{
    setvar(VAR_ITEM_INDEX, 7)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM7)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item8
{
    setvar(VAR_ITEM_INDEX, 8)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM8)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item9
{
    setvar(VAR_ITEM_INDEX, 9)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM9)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item10
{
    setvar(VAR_ITEM_INDEX, 10)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM10)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item11
{
    setvar(VAR_ITEM_INDEX, 11)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM11)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item12
{
    setvar(VAR_ITEM_INDEX, 12)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM12)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item13
{
    setvar(VAR_ITEM_INDEX, 13)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM13)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item14
{
    setvar(VAR_ITEM_INDEX, 14)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM14)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item15
{
    setvar(VAR_ITEM_INDEX, 15)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM15)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item16
{
    setvar(VAR_ITEM_INDEX, 16)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM16)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item17
{
    setvar(VAR_ITEM_INDEX, 17)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM17)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item18
{
    setvar(VAR_ITEM_INDEX, 18)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM18)
    call(Rogue_GiveItem_Internal)
}
